SQL> 
SQL> ALTER SESSION SET NLS_DATE_FORMAT='YYYY/MM/DD';

Session modifié(e).

SQL> 
SQL> @creation_tables.sql
SQL> REM CREATION DES TABLES
SQL> 
SQL> CREATE TABLE JOUEUR(
  2  	NoJoueur						INTEGER			NOT NULL,
  3  	Courriel						VARCHAR2(256)	NOT NULL,
  4  	Surnom							VARCHAR2(50)	NOT NULL,
  5  	Miniature						BLOB,
  6  	Nom								VARCHAR2(100),
  7  	Prenom							VARCHAR2(100),
  8  	Actif							CHAR(1)
  9  );

Table JOUEUR créé(e).

SQL> 
SQL> CREATE TABLE ESRB(
  2  	Code							CHAR(1)			NOT NULL,
  3  	Description						VARCHAR2(50)	NOT NULL
  4  );

Table ESRB créé(e).

SQL> 
SQL> CREATE TABLE GENRE(
  2  	Code							CHAR(3)			NOT NULL,
  3  	Description						VARCHAR2(50)	NOT NULL,
  4  	CodeGenreParent					CHAR(3)			NOT NULL
  5  );

Table GENRE créé(e).

SQL> 
SQL> CREATE TABLE SOUS_GENRE_JEU(
  2  	CodeSousGenre					CHAR(3)			NOT NULL,
  3  	IdJeu							INTEGER			NOT NULL
  4  );

Table SOUS_GENRE_JEU créé(e).

SQL> 
SQL> CREATE TABLE JEU(
  2  	IdJeu							INTEGER			NOT NULL,
  3  	Nom								VARCHAR2(100)	NOT NULL,
  4  	Description						VARCHAR2(256)	NOT NULL,
  5  	CodeESRB						CHAR(1),
  6  	CodeGenre						CHAR(3)
  7  );

Table JEU créé(e).

SQL> 
SQL> CREATE TABLE CONTENU(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	Nom								VARCHAR2(100)	NOT NULL,
  4  	Description						VARCHAR2(256)	NOT NULL,
  5  	DateSortie						DATE,
  6  	TypeContenu						VARCHAR2(1)		NOT NULL,
  7  	IdJeu							INTEGER			NOT NULL	
  8  );

Table CONTENU créé(e).

SQL> 
SQL> CREATE TABLE CONTENU_POSSEDE(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL
  4  );

Table CONTENU_POSSEDE créé(e).

SQL> 
SQL> CREATE TABLE SUCCES(
  2  	IdSucces						INTEGER			NOT NULL,
  3  	Titre							VARCHAR2(50)	NOT NULL,
  4  	Description						VARCHAR2(256),
  5  	Image							BLOB,
  6  	Valeur							NUMBER(3,0),
  7  	IdContenu						INTEGER			NOT NULL	
  8  );

Table SUCCES créé(e).

SQL> 
SQL> CREATE TABLE SUCCES_CALCULE(
  2  	IdSucces						INTEGER			NOT NULL,
  3  	MaximumRequis					NUMBER(3,0)		NOT NULL
  4  );

Table SUCCES_CALCULE créé(e).

SQL> 
SQL> CREATE TABLE SUCCES_REALISE(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL,
  4  	IdSucces						INTEGER			NOT NULL
  5  );

Table SUCCES_REALISE créé(e).

SQL> 
SQL> CREATE TABLE SUCCES_EN_COURS(
  2  	IdContenu						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL,
  4  	IdSucces						INTEGER			NOT NULL,
  5  	Compteur						NUMBER(3,0)		NOT NULL
  6  );

Table SUCCES_EN_COURS créé(e).

SQL> 
SQL> 
SQL> CREATE TABLE FORFAIT(
  2  	Code							CHAR(5)			NOT NULL,
  3  	Nom								VARCHAR2(100),
  4  	Description						VARCHAR2(1000)
  5  );

Table FORFAIT créé(e).

SQL> 
SQL> CREATE TABLE PERIODE(
  2  	IdPeriode						INTEGER			NOT NULL,
  3  	DateDebut						DATE			NOT NULL,
  4  	DateFin							DATE			NOT NULL,
  5  	Prix							NUMBER (6,2)	NOT NULL,
  6  	CodeForfait						CHAR(5)			NOT NULL
  7  );

Table PERIODE créé(e).

SQL> 
SQL> CREATE TABLE PERIODE_FORFAIT_JOUEUR(
  2  	IdPeriode						INTEGER			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL,
  4  	DateAchat						DATE			NOT NULL
  5  );

Table PERIODE_FORFAIT_JOUEUR créé(e).

SQL> 
SQL> CREATE TABLE RESEAU(
  2  	Code							CHAR(6)			NOT NULL,
  3  	Nom								VARCHAR2(50)	NOT NULL,
  4  	Description						VARCHAR2(100)	NOT NULL,
  5  	Actif							VARCHAR2(1)		NOT NULL
  6  );

Table RESEAU créé(e).

SQL> 
SQL> CREATE TABLE ABONNEMENT_RESEAU(
  2  	CodeReseau						CHAR(6)			NOT NULL,
  3  	NoJoueur						INTEGER			NOT NULL
  4  );

Table ABONNEMENT_RESEAU créé(e).

SQL> 
SQL> CREATE TABLE SUIVI_RESEAU(
  2  	IdSuivi							INTEGER			NOT NULL,
  3  	Moment							TIMESTAMP		NOT NULL,
  4  	CodeReseau						CHAR(6)			NOT NULL,
  5  	DateSuivi						DATE			NOT NULL,
  6  	Action							CHAR(3)			NOT NULL,
  7  	NoJoueur						INTEGER
  8  );

Table SUIVI_RESEAU créé(e).

SQL> 
SQL> CREATE TABLE AMI(
  2  	NoJoueurInvitant				INTEGER			NOT NULL,	
  3  	NoJoueurInvite					INTEGER			NOT NULL,	
  4  	DateDebut						DATE,
  5  	CodeStatut						CHAR(3)			NOT NULL	
  6  );

Table AMI créé(e).

SQL> 
SQL> CREATE TABLE STATUT_AMITIE(
  2  	CodeStatut						CHAR(3)			NOT NULL,
  3  	Description						VARCHAR2(25)	NOT NULL	
  4  );

Table STATUT_AMITIE créé(e).

SQL> 
SQL> CREATE TABLE SUIVI_AMITIE(
  2  	IdSuivi							INTEGER			NOT NULL,
  3  	Moment							TIMESTAMP		NOT NULL,
  4  	NoJoueurInvitant				INTEGER			NOT NULL,	
  5  	NoJoueurInvite					INTEGER			NOT NULL,	
  6  	DateSuivi						DATE			NOT NULL,
  7  	CodeStatut						CHAR(3)			NOT NULL
  8  );

Table SUIVI_AMITIE créé(e).

SQL> @creation_contraintes.sql
SQL> REM CLÉS PRIMAIRES (PK)
SQL> 
SQL> ALTER TABLE JOUEUR
  2  	ADD CONSTRAINT JOUEUR_PK
  3  	PRIMARY KEY (NoJoueur)	
  4  	USING INDEX;

Table JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE ESRB
  2  	ADD CONSTRAINT ESRB_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table ESRB modifié(e).

SQL> 
SQL> ALTER TABLE GENRE
  2  	ADD CONSTRAINT GENRE_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table GENRE modifié(e).

SQL> 
SQL> ALTER TABLE SOUS_GENRE_JEU
  2  	ADD CONSTRAINT SOUS_GENRE_JEU_PK
  3  	PRIMARY KEY (CodeSousGenre, IdJeu)	
  4  	USING INDEX;

Table SOUS_GENRE_JEU modifié(e).

SQL> 
SQL> ALTER TABLE JEU
  2  	ADD CONSTRAINT JEU_PK
  3  	PRIMARY KEY (IdJeu)	
  4  	USING INDEX;

Table JEU modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU
  2  	ADD CONSTRAINT CONTENU_PK
  3  	PRIMARY KEY (IdContenu)	
  4  	USING INDEX;

Table CONTENU modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU_POSSEDE
  2  	ADD CONSTRAINT CONTENU_POSSEDE_PK
  3  	PRIMARY KEY (IdContenu, NoJoueur)	
  4  	USING INDEX;

Table CONTENU_POSSEDE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES
  2  	ADD CONSTRAINT SUCCES_PK
  3  	PRIMARY KEY (IdSucces)	
  4  	USING INDEX;

Table SUCCES modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_CALCULE
  2  	ADD CONSTRAINT SUCCES_CALCULE_PK
  3  	PRIMARY KEY (IdSucces)	
  4  	USING INDEX;

Table SUCCES_CALCULE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_REALISE
  2  	ADD CONSTRAINT SUCCES_REALISE_PK
  3  	PRIMARY KEY (IdContenu, NoJoueur, IdSucces)	
  4  	USING INDEX;

Table SUCCES_REALISE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT SUCCES_EN_COURS_PK
  3  	PRIMARY KEY (IdContenu, NoJoueur, IdSucces)	
  4  	USING INDEX;

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE FORFAIT
  2  	ADD CONSTRAINT FORFAIT_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table FORFAIT modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE
  2  	ADD CONSTRAINT PERIODE_PK
  3  	PRIMARY KEY (IdPeriode)	
  4  	USING INDEX;

Table PERIODE modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2  	ADD CONSTRAINT PERIODE_FORFAIT_JOUEUR_PK
  3  	PRIMARY KEY (IdPeriode, NoJoueur)
  4  	USING INDEX;

Table PERIODE_FORFAIT_JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE RESEAU
  2  	ADD CONSTRAINT RESEAU_PK
  3  	PRIMARY KEY (Code)	
  4  	USING INDEX;

Table RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE ABONNEMENT_RESEAU
  2  	ADD CONSTRAINT ABONNEMENT_RESEAU_PK
  3  	PRIMARY KEY (CodeReseau, NoJoueur)	
  4  	USING INDEX;

Table ABONNEMENT_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT SUIVI_RESEAU_PK
  3  	PRIMARY KEY (IdSuivi)	
  4  	USING INDEX;

Table SUIVI_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE AMI
  2  	ADD CONSTRAINT AMI_PK
  3  	PRIMARY KEY (NoJoueurInvitant, NoJoueurInvite)	
  4  	USING INDEX;

Table AMI modifié(e).

SQL> 
SQL> ALTER TABLE STATUT_AMITIE
  2  	ADD CONSTRAINT STATUT_AMITIE_PK
  3  	PRIMARY KEY (CodeStatut)	
  4  	USING INDEX;

Table STATUT_AMITIE modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMITIE_PK
  3  	PRIMARY KEY (IdSuivi)	
  4  	USING INDEX;

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> 
SQL> REM CLÉS ÉTRANGÈRES (FK)
SQL> 
SQL> ALTER TABLE GENRE
  2  	ADD CONSTRAINT GENRE_FK
  3  	FOREIGN KEY (CodeGenreParent)
  4  	REFERENCES GENRE (Code);

Table GENRE modifié(e).

SQL> 
SQL> ALTER TABLE SOUS_GENRE_JEU
  2  	ADD CONSTRAINT SOUS_GENRE_JEU_SOUS_GENRE_FK
  3  	FOREIGN KEY (CodeSousGenre)
  4  	REFERENCES GENRE (Code);

Table SOUS_GENRE_JEU modifié(e).

SQL> 
SQL> ALTER TABLE SOUS_GENRE_JEU
  2  	ADD CONSTRAINT SOUS_GENRE_JEU_ID_JEU_FK
  3  	FOREIGN KEY (IdJeu)
  4  	REFERENCES JEU (IdJeu);

Table SOUS_GENRE_JEU modifié(e).

SQL> 
SQL> ALTER TABLE JEU
  2  	ADD CONSTRAINT JEU_CODE_ESRB_FK
  3  	FOREIGN KEY (CodeESRB)
  4  	REFERENCES ESRB (Code);

Table JEU modifié(e).

SQL> 
SQL> ALTER TABLE JEU
  2  	ADD CONSTRAINT JEU_CODE_GENRE_FK
  3  	FOREIGN KEY (CodeGenre)
  4  	REFERENCES GENRE (Code);

Table JEU modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU
  2  	ADD CONSTRAINT CONTENU_FK
  3  	FOREIGN KEY (IdJeu)
  4  	REFERENCES JEU (IdJeu);

Table CONTENU modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU_POSSEDE
  2  	ADD CONSTRAINT CONTENU_POSSEDE_ID_CONTENU_FK
  3  	FOREIGN KEY (IdContenu)
  4  	REFERENCES Contenu (IdContenu);

Table CONTENU_POSSEDE modifié(e).

SQL> 
SQL> ALTER TABLE CONTENU_POSSEDE
  2  	ADD CONSTRAINT CONTENU_POSSEDE_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES Joueur (NoJoueur);

Table CONTENU_POSSEDE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES
  2  	ADD CONSTRAINT SUCCES_FK
  3  	FOREIGN KEY (IdContenu)
  4  	REFERENCES CONTENU (IdContenu);

Table SUCCES modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_CALCULE
  2  	ADD CONSTRAINT SUCCES_CALCULE_FK
  3  	FOREIGN KEY (IdSucces)
  4  	REFERENCES SUCCES (IdSucces);

Table SUCCES_CALCULE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_REALISE
  2  	ADD CONSTRAINT SUCCES_REALISE_ID_SUCCES_FK
  3  	FOREIGN KEY (IdSucces)
  4  	REFERENCES SUCCES (IdSucces);

Table SUCCES_REALISE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_REALISE
  2  	ADD CONSTRAINT SUCCES_REALISE_CONTENU_FK
  3  	FOREIGN KEY (IdContenu, NoJoueur)
  4  	REFERENCES CONTENU_POSSEDE (IdContenu, NoJoueur);

Table SUCCES_REALISE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT SUCCES_EN_COURS_ID_SUCCES_FK
  3  	FOREIGN KEY (IdSucces)
  4  	REFERENCES SUCCES_CALCULE (IdSucces);

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT SUCCES_EN_COURS_CONTENU_FK
  3  	FOREIGN KEY (IdContenu, NoJoueur)
  4  	REFERENCES CONTENU_POSSEDE (IdContenu, NoJoueur);

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE
  2  	ADD CONSTRAINT PERIODE_FK
  3  	FOREIGN KEY (CodeForfait)
  4  	REFERENCES FORFAIT (Code);

Table PERIODE modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2  	ADD CONSTRAINT PERIODE_FORF_J_ID_PERIODE_FK
  3  	FOREIGN KEY (IdPeriode)
  4  	REFERENCES PERIODE (IdPeriode);

Table PERIODE_FORFAIT_JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2  	ADD CONSTRAINT PERIODE_FORF_J_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES JOUEUR (NoJoueur);

Table PERIODE_FORFAIT_JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE ABONNEMENT_RESEAU
  2  	ADD CONSTRAINT ABONNEMENT_CODE_RESEAU_FK
  3  	FOREIGN KEY (CodeReseau)
  4  	REFERENCES RESEAU (Code);

Table ABONNEMENT_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE ABONNEMENT_RESEAU
  2  	ADD CONSTRAINT ABONNEMENT_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES JOUEUR (NoJoueur);

Table ABONNEMENT_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT SUIVI_RESEAU_CODE_RESEAU_FK
  3  	FOREIGN KEY (CodeReseau)
  4  	REFERENCES RESEAU (Code);

Table SUIVI_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT SUIVI_RESEAU_NO_JOUEUR_FK
  3  	FOREIGN KEY (NoJoueur)
  4  	REFERENCES JOUEUR (NoJoueur);

Table SUIVI_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE AMI 
  2  	ADD CONSTRAINT AMI_CODE_STATUT_FK
  3  	FOREIGN KEY (CodeStatut)
  4  	REFERENCES STATUT_AMITIE (CodeStatut);

Table AMI modifié(e).

SQL> 
SQL> ALTER TABLE AMI
  2  	ADD CONSTRAINT AMI_NO_JOUEUR_INVITANT_FK
  3  	FOREIGN KEY (NoJoueurInvitant)
  4  	REFERENCES JOUEUR (NoJoueur);

Table AMI modifié(e).

SQL> 
SQL> ALTER TABLE AMI
  2  	ADD CONSTRAINT AMI_NO_JOUEUR_INVITE_FK
  3  	FOREIGN KEY (NoJoueurInvite)
  4  	REFERENCES JOUEUR (NoJoueur);

Table AMI modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMI_NO_J_INVITANT_FK
  3  	FOREIGN KEY (NoJoueurInvitant)
  4  	REFERENCES JOUEUR (NoJoueur);

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMI_NO_J_INVITE_FK
  3  	FOREIGN KEY (NoJoueurInvite)
  4  	REFERENCES JOUEUR (NoJoueur);

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2  	ADD CONSTRAINT SUIVI_AMITIE_CODE_STATUT_FK
  3  	FOREIGN KEY (CodeStatut)
  4  	REFERENCES STATUT_AMITIE (CodeStatut);

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> 
SQL> REM Champs UNIQUE
SQL> 
SQL> ALTER TABLE JOUEUR
  2  	ADD CONSTRAINT JOUEUR_UNIQUE UNIQUE (Courriel, Surnom);

Table JOUEUR modifié(e).

SQL> 
SQL> 
SQL> REM Listes des constraintes (CHECK CONSTRAINT)
SQL> 
SQL> ALTER TABLE CONTENU
  2  	ADD CONSTRAINT CHECK_CONTENU_TYPE CHECK (
  3  		TypeContenu IN ('J', 'D', 'O')
  4  	);

Table CONTENU modifié(e).

SQL> 
SQL> ALTER TABLE JOUEUR
  2  	ADD CONSTRAINT CHECK_JOUEUR_ACTIF CHECK (
  3  		Actif IN ('1', '0')
  4  	);

Table JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE RESEAU
  2  	ADD CONSTRAINT CHECK_RESEAU_ACTIF CHECK (
  3  		Actif IN ('1', '0')
  4  	);

Table RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2  	ADD CONSTRAINT CHECK_SUIVI_RESEAU_ACTION CHECK (
  3  		Action IN ('CRE', 'SUP', 'ACT', 'DES', 'ABO', 'DSA')
  4  	);

Table SUIVI_RESEAU modifié(e).

SQL> REM 'CREATION RESEAU', 'SUPPRESSION RESEAU', 
SQL> REM 'ACTIVATION RESEAU', 'DESACTIVATION RESEAU', 
SQL> REM 'ABONNEMENT JOUEUR', 'DESABONNEMENT JOUEUR'
SQL> 
SQL> ALTER TABLE SUCCES
  2  	ADD CONSTRAINT CHECK_SUCCES_VALEUR CHECK (Valeur > 0);

Table SUCCES modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_CALCULE
  2  	ADD CONSTRAINT CHECK_SUCCES_C_MAX_REQUIS CHECK (MaximumRequis > 0);

Table SUCCES_CALCULE modifié(e).

SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2  	ADD CONSTRAINT CHECK_SUCCES_EN_COURS_COMPTEUR CHECK (Compteur > 0);

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE
  2  	ADD CONSTRAINT CHECK_PERIODE_PRIX CHECK (Prix >= 0);

Table PERIODE modifié(e).

SQL> 
SQL> 
SQL> REM Valeurs par défaut
SQL> 
SQL> ALTER TABLE SUCCES_EN_COURS
  2    MODIFY (Compteur DEFAULT 0);

Table SUCCES_EN_COURS modifié(e).

SQL> 
SQL> ALTER TABLE PERIODE_FORFAIT_JOUEUR
  2    MODIFY (DateAchat DEFAULT SysDate);

Table PERIODE_FORFAIT_JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE JOUEUR
  2    MODIFY (Actif DEFAULT '1');

Table JOUEUR modifié(e).

SQL> 
SQL> ALTER TABLE RESEAU
  2    MODIFY (Actif DEFAULT '1');

Table RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE RESEAU
  2    MODIFY (Actif DEFAULT '1');

Table RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_RESEAU
  2    MODIFY (Moment DEFAULT CURRENT_TIMESTAMP);

Table SUIVI_RESEAU modifié(e).

SQL> 
SQL> ALTER TABLE SUIVI_AMITIE
  2    MODIFY (Moment DEFAULT CURRENT_TIMESTAMP);

Table SUIVI_AMITIE modifié(e).

SQL> 
SQL> 
SQL> REM Séquences
SQL> 
SQL> CREATE SEQUENCE JEU_SEQ;

Sequence JEU_SEQ créé(e).

SQL> CREATE SEQUENCE CONTENU_SEQ;

Sequence CONTENU_SEQ créé(e).

SQL> CREATE SEQUENCE SUCCES_SEQ;

Sequence SUCCES_SEQ créé(e).

SQL> CREATE SEQUENCE PERIODE_SEQ;

Sequence PERIODE_SEQ créé(e).

SQL> CREATE SEQUENCE JOUEUR_SEQ;

Sequence JOUEUR_SEQ créé(e).

SQL> CREATE SEQUENCE SUIVI_AMITIE_SEQ;

Sequence SUIVI_AMITIE_SEQ créé(e).

SQL> CREATE SEQUENCE SUIVI_RESEAU_SEQ;

Sequence SUIVI_RESEAU_SEQ créé(e).

SQL> @creation_scripts.sql
SQL> REM CREATION DES SCRIPTS
SQL> 
SQL> @scripts/creation_declencheurs.sql
SQL> REM CREATION DES TRIGGERS
SQL> 
SQL> @declencheurs/sequences.sql
SQL> CREATE TRIGGER JEU_ID_TRG
  2      BEFORE INSERT
  3      ON JEU
  4      FOR EACH ROW
  5  BEGIN
  6      SELECT JEU_SEQ.NEXTVAL
  7          INTO :NEW.IdJeu
  8          FROM DUAL;
  9  END;
 10  /

Elément Trigger JEU_ID_TRG compilé

SQL> 
SQL> CREATE TRIGGER CONTENU_ID_TRG
  2      BEFORE INSERT
  3      ON CONTENU
  4      FOR EACH ROW
  5  BEGIN
  6      SELECT CONTENU_SEQ.NEXTVAL
  7          INTO :NEW.IdContenu
  8          FROM DUAL;
  9          END;
 10  
 11  /

Elément Trigger CONTENU_ID_TRG compilé

SQL> CREATE TRIGGER SUCCES_ID_TRG
  2      BEFORE INSERT
  3      ON SUCCES
  4      FOR EACH ROW
  5  BEGIN
  6      SELECT SUCCES_SEQ.NEXTVAL
  7          INTO :NEW.IdSucces
  8          FROM DUAL;
  9          END;
 10  
 11  /

Elément Trigger SUCCES_ID_TRG compilé

SQL> CREATE TRIGGER PERIODE_ID_TRG
  2      BEFORE INSERT
  3      ON PERIODE
  4      FOR EACH ROW
  5  BEGIN
  6      SELECT PERIODE_SEQ.NEXTVAL
  7          INTO :NEW.IdPeriode
  8          FROM DUAL;
  9          END;
 10  
 11  /

Elément Trigger PERIODE_ID_TRG compilé

SQL> CREATE TRIGGER JOUEUR_ID_TRG
  2      BEFORE INSERT
  3      ON JOUEUR
  4      FOR EACH ROW
  5  BEGIN
  6      SELECT JOUEUR_SEQ.NEXTVAL
  7          INTO :NEW.NoJoueur
  8          FROM DUAL;
  9          END;
 10  
 11  /

Elément Trigger JOUEUR_ID_TRG compilé

SQL> CREATE TRIGGER SUIVI_AMITIE_ID_TRG
  2      BEFORE INSERT
  3      ON SUIVI_AMITIE
  4      FOR EACH ROW
  5  BEGIN
  6      SELECT SUIVI_AMITIE_SEQ.NEXTVAL
  7          INTO :NEW.IdSuivi
  8          FROM DUAL;
  9          END;
 10  
 11  /

Elément Trigger SUIVI_AMITIE_ID_TRG compilé

SQL> CREATE TRIGGER SUIVI_RESEAU_ID_TRG
  2      BEFORE INSERT
  3      ON SUIVI_RESEAU
  4      FOR EACH ROW
  5  BEGIN
  6      SELECT SUIVI_RESEAU_SEQ.NEXTVAL
  7          INTO :NEW.IdSuivi
  8          FROM DUAL;
  9          END;
 10  
 11  /

Elément Trigger SUIVI_RESEAU_ID_TRG compilé

SQL> 
SQL> @declencheurs/nouveauSuccesEnCours.sql 
SQL> CREATE OR REPLACE TRIGGER nouveauSuccesEnCours
  2  BEFORE INSERT  
  3  ON SUCCES_EN_COURS 
  4  FOR EACH ROW
  5  DECLARE 
  6      nbSucces NUMBER;
  7      CURSOR cSuccesRealises IS
  8          SELECT COUNT(*) AS nbSucces
  9          FROM SUCCES_REALISE
 10          WHERE IdSucces = :NEW.IdSucces AND NoJoueur = :NEW.NoJoueur;
 11  BEGIN
 12      OPEN cSuccesRealises;
 13      FETCH cSuccesRealises INTO nbSucces;
 14      CLOSE cSuccesRealises;
 15  
 16      IF nbSucces > 0 THEN
 17          raise_application_error(-20000, 'Le succès est déjà réalisé.');
 18      END IF;
 19  END;
 20  /

Elément Trigger NOUVEAUSUCCESENCOURS compilé

SQL> @declencheurs/genre.sql 
SQL> CREATE OR REPLACE TRIGGER Genre_TRG
  2  AFTER UPDATE OF CodeGenre ON Jeu
  3  FOR EACH ROW
  4  BEGIN
  5      -- Suppression des sous-genres si le genre a été modifié
  6      IF :OLD.CodeGenre <> :NEW.CodeGenre THEN
  7           DELETE FROM  SOUS_GENRE_JEU WHERE IdJeu = :OLD.IdJeu;
  8  
  9          -- Mise à jour des sous-genres avec le nouveau genre
 10           UPDATE Sous_Genre_Jeu
 11           SET CodeSousGenre = :NEW.CodeGenre
 12           WHERE IdJeu = :OLD.IdJeu;
 13      END IF;
 14  END;
 15  /

Elément Trigger GENRE_TRG compilé

SQL> @declencheurs/suiviReseau.sql 
SQL> CREATE OR REPLACE TRIGGER Suivi_Reseau_TRG
  2  AFTER INSERT OR UPDATE ON Reseau
  3  FOR EACH ROW
  4  DECLARE
  5    code CHAR(3);
  6  BEGIN
  7    IF INSERTING THEN
  8      -- Insertion : le code est "CRE"
  9      code := 'CRE';
 10    ELSIF UPDATING THEN
 11      -- Mise à jour : le code dépend de l'état du réseau
 12      IF :NEW.Actif = 'O' THEN
 13        code := 'ACT'; -- Réseau actif : le code est "ACT"
 14      ELSE
 15        code := 'DES'; -- Réseau inactif : le code est "DES"
 16      END IF;
 17    END IF;
 18  
 19    -- Insertion dans la table SUIVI_RESEAU
 20    INSERT INTO SUIVI_RESEAU (IdSuivi, Moment, CodeReseau, DateSuivi, Action, NoJoueur)
 21    VALUES (SUIVI_RESEAU_SEQ.NEXTVAL, SYSTIMESTAMP, :NEW.Code, TRUNC(SYSDATE), code, NULL);
 22  END;
 23  /

Elément Trigger SUIVI_RESEAU_TRG compilé

SQL> @declencheurs/suiviAbonnementReseau.sql
SQL> CREATE OR REPLACE TRIGGER Suivi_Abonnement_Reseau_TRG 
  2  AFTER INSERT OR DELETE 
  3  ON ABONNEMENT_RESEAU
  4  FOR EACH ROW 
  5  DECLARE
  6    code CHAR(3);
  7    codeReseau VARCHAR2(6);
  8    noJoueur INTEGER;
  9  BEGIN 
 10    IF INSERTING THEN
 11      code := 'ABO';
 12      codeReseau := :NEW.CodeReseau;
 13      noJoueur := :NEW.NoJoueur;
 14    ELSIF DELETING THEN
 15      code := 'DSA';
 16      codeReseau := :OLD.CodeReseau;
 17      noJoueur := :OLD.NoJoueur;
 18    END IF;
 19  
 20    INSERT INTO SUIVI_RESEAU (IdSuivi, Moment, CodeReseau, DateSuivi, Action, NoJoueur)
 21    VALUES (SUIVI_RESEAU_SEQ.NEXTVAL, SYSTIMESTAMP, codeReseau, TRUNC(SYSDATE), code, noJoueur);
 22  END;
 23  /

Elément Trigger SUIVI_ABONNEMENT_RESEAU_TRG compilé

SQL> @declencheurs/suiviAmi.sql
SQL> CREATE OR REPLACE TRIGGER Suivi_Ami_TRG AFTER
  2  UPDATE OR INSERT OR DELETE 
  3  ON AMI
  4  FOR EACH ROW 
  5  DECLARE
  6  code CHAR(3);
  7  descriptionS VARCHAR2(25);
  8      BEGIN 
  9    IF INSERTING OR UPDATING THEN
 10      code:=:NEW.CodeStatut;
 11      ELSIF DELETING THEN
 12          code:=:OLD.CodeStatut;
 13    END IF;
 14  
 15     INSERT  INTO SUIVI_AMITIE  (IdSuivi,Moment,NoJoueurInvitant,
 16   NoJoueurInvite,DateSuivi,CodeStatut	)
 17      VALUES(SUIVI_AMITIE_SEQ.NEXTVAL,SYSTIMESTAMP, :NEW.NoJoueurInvitant,
 18      :NEW.NoJoueurInvite,SYSDATE,code);
 19  END;
 20  /

Elément Trigger SUIVI_AMI_TRG compilé

SQL> @scripts/creation_procedures.sql
SQL> REM CREATION DES PROCEDURES
SQL> 
SQL> @procedures/ajoutForfait.sql
SQL> CREATE OR REPLACE PROCEDURE ajoutForfait(Code IN CHAR,
  2  Nom IN VARCHAR2,
  3  Description IN VARCHAR2,
  4  Prix IN NUMBER)
  5  is
  6      DateDebut DATE;
  7      DateFin DATE;
  8      NomForfait VARCHAR(100);
  9  
 10  BEGIN
 11  
 12  -- ON VA INITIALISER A LA DATE ACTUELLE
 13      DateDebut := SYSDATE;
 14  
 15  --ON MET LA DATE DE FIN POUR 1 AN 
 16   DateFin := DateDebut + INTERVAL '1' YEAR;
 17  --ON PLACE LA CODITION POUR VERIFIER LE NOM
 18  IF Nom IS NULL THEN
 19      NomForfait:='Aucun Forfait';
 20  
 21  Else
 22      NomForfait:=Nom;
 23  END IF;
 24  
 25  --ON INSï¿½RE DANS LA TABLE FORFAIT
 26      INSERT INTO FORFAIT(Code,Nom,Description)
 27      values(Code,NomForfait,Description);
 28  --PUIS DANS LA TABLE PERIODE
 29      INSERT INTO PERIODE(IdPeriode,DateDebut,DateFin,Prix,CodeForfait)
 30      values(DateDebut,DateFin,Prix,Code);
 31  
 32  
 33  END ajoutForfait;
 34  /

Elément Procedure AJOUTFORFAIT compilé

LINE/COL  ERROR
--------- -------------------------------------------------------------
29/5      PL/SQL: SQL Statement ignored
30/5      PL/SQL: ORA-00947: nombre de valeurs insuffisant
Erreurs : consulter le journal du compilateur
SQL> @procedures/prolongationForfait.sql
SQL> CREATE OR REPLACE PROCEDURE prolongationForfait (
  2  CodeForfait IN CHAR,
  3  nb_joueur_touche out number)
  4  IS
  5  BEGIN
  6  --Tous les joueurs avec ce forfait actif ont une prolongation de 
  7  --deux mois (ajouter deux mois à la date dachat)
  8      UPDATE PERIODE_FORFAIT_JOUEUR
  9      SET DateAchat=DateAchat+ INTERVAL '2' MONTH
 10      WHERE IdPeriode IN  (SELECT IdPeriode FROM PERIODE WHERE CodeForfait=CodeForfait
 11      AND DateFin> SYSDATE);
 12  --  Tous les forfaits ont une durée dun an à partir de la date dachat
 13  
 14      UPDATE PERIODE   
 15      SET DateFin=GREATEST((SELECT DateAchat FROM PERIODE_FORFAIT_JOUEUR WHERE IdPeriode = PERIODE.IdPeriode)+ INTERVAL '1' YEAR,DateFin)
 16      WHERE IdPeriode IN(SELECT IdPeriode FROM PERIODE WHERE CodeForfait=CodeForfait
 17      AND DateFin> SYSDATE);
 18  
 19      --le nonmbre de joueur touché
 20      SELECT COUNT(*) INTO nb_joueur_touche 
 21          FROM PERIODE_FORFAIT_JOUEUR
 22          WHERE IdPeriode IN (SELECT IdPeriode FROM PERIODE WHERE CodeForfait=CodeForfait
 23      AND DateFin> SYSDATE);
 24  
 25      END prolongationForfait;
 26  /

Elément Procedure PROLONGATIONFORFAIT compilé

SQL> @procedures/ajusterPromotion.sql
SQL> CREATE OR REPLACE PROCEDURE ajusterPromotion (
  2  CodeForfait OUT CHAR,
  3   OUT NUMBER)
  4  IS 
  5  PrixMax NUMBER;
  6  NouveauPrix NUMBER ;
  7  BEGIN
  8      SELECT  MAX(p.Prix)
  9      into PrixMax FROM PERIODE p
 10      JOIN ABONNEMENT_RESEAU a ON p.CodeForfait=a.CodeReseau
 11      WHERE a.CodeReseau=(SELECT CodeReseau FROM(SELECT CodeReseau,COUNT(*)
 12      AS C FROM ABONNEMENT_RESEAU GROUP BY CodeReseau ORDER BY C DESC)
 13      WHERE ROWNUM=1);
 14  
 15      SELECT CodeForfait,Prix
 16      INTO CodeForfait,NouveauPrix FROM PERIODE p WHERE p.Prix =PrixMAx AND ROWNUM=1;
 17  
 18      IF NouveauPrix<PrixMax THEN NouveauPrix :=NouveauPrix * 1.1;
 19      END IF;
 20  
 21      END ajusterPromotion;
 22  /

Elément Procedure AJUSTERPROMOTION compilé

SQL> @procedures/suppressionJeu.sql
SQL> CREATE OR REPLACE PROCEDURE suppressionJeu (
  2      NomJeu IN VARCHAR,
  3      Resultat OUT NUMBER
  4  )
  5  IS
  6      NbJeux INT;
  7  BEGIN
  8  COMMIT;
  9  
 10      SELECT COUNT(*) INTO NbJeux
 11      FROM JEU
 12      WHERE Nom = NomJeu;
 13  
 14      IF NbJeux = 0 THEN
 15          Resultat := 1; 
 16          RETURN;
 17      END IF;
 18  
 19      -- Vérifions  si deux jeux ont le même nom
 20      IF NbJeux > 1 THEN
 21          Resultat := 2; 
 22          RETURN;
 23      END IF;
 24  
 25  
 26      BEGIN
 27          -- Supprimons les sous-genres du jeu
 28          DELETE FROM SOUS_GENRE_JEU
 29          WHERE IdJeu = (SELECT IdJeu FROM JEU WHERE Nom = NomJeu);
 30  
 31          -- Supprimons tous les éléments de contenu du jeu
 32          DELETE FROM CONTENU
 33          WHERE IdJeu = (SELECT IdJeu FROM JEU WHERE Nom = NomJeu);
 34  
 35          -- Supprimons tous les succès du jeu
 36          DELETE FROM SUCCES
 37          WHERE IdContenu IN (SELECT IdContenu FROM CONTENU WHERE IdJeu = (SELECT IdJeu FROM JEU WHERE Nom = NomJeu));
 38  
 39          -- Supprimons le jeu 
 40          DELETE FROM JEU WHERE Nom = NomJeu;
 41  
 42          Resultat := 0;
 43          -- Commit transaction
 44          COMMIT;
 45      EXCEPTION
 46          WHEN OTHERS THEN
 47  
 48              ROLLBACK;
 49              Resultat := 3;
 50      END;
 51  END suppressionJeu;
 52  /

Elément Procedure SUPPRESSIONJEU compilé

SQL> @scripts/creation_fonctions.sql
SQL> REM CREATION DES FONCTIONS
SQL> 
SQL> @fonctions/succesPlusRealise.sql
SQL> CREATE OR REPLACE FUNCTION succesPlusRealise
  2  RETURN VARCHAR2
  3  IS TitreSucces VARCHAR(50);
  4  BEGIN
  5      SELECT Titre INTO TitreSucces
  6      FROM SUCCES
  7      WHERE ROWNUM =1;
  8  
  9      RETURN TitreSucces;
 10   END succesPlusRealise;
 11  /

Elément Function SUCCESPLUSREALISE compilé

SQL> @fonctions/validerGenre.sql
SQL> CREATE OR REPLACE FUNCTION validerGenre (Code IN CHAR) RETURN CHAR
  2  IS
  3      CodeRetour CHAR(3);
  4  
  5      BEGIN
  6  
  7      SELECT Code INTO CodeRetour  FROM GENRE 
  8      WHERE Code=Code AND ROWNUM = 1;
  9  
 10      IF CodeRetour IS NULL THEN
 11      SELECT CodeGenreParent INTO CodeRetour  FROM GENRE 
 12      WHERE Code=Code  AND ROWNUM = 1;
 13  
 14      END IF;
 15      RETURN CodeRetour;
 16  END validerGenre;
 17  /

Elément Function VALIDERGENRE compilé

SQL> @fonctions/joueurLePlusPopulaire.sql
SQL> 
SQL> CREATE OR REPLACE FUNCTION joueurLePlusPopulaire RETURN VARCHAR2
  2  IS
  3  SurnomP VARCHAR2(50);
  4   BEGIN
  5  
  6      SELECT Surnom INTO SurnomP
  7      FROM ( SELECT  J.Surnom FROM JOUEUR J
  8      JOIN AMI A ON J.NoJoueur=A.NoJoueurInvitant OR J.NoJoueur=A.NoJoueurInvite
  9      WHERE 
 10      J.ACTIF ='1' 
 11      AND J.Nom IS NOT NULL
 12      AND J.Prenom IS NOT NULL
 13          GROUP BY J.Surnom ORDER BY COUNT(*) DESC)
 14          WHERE ROWNUM = 1;
 15  
 16          RETURN SurnomP;
 17    END joueurLePlusPopulaire;
 18  /

Elément Function JOUEURLEPLUSPOPULAIRE compilé

SQL> @fonctions/jeuLePlusPopulaire.sql
SQL> CREATE OR REPLACE FUNCTION jeuLePlusPopulaire ( Code IN CHAR)
  2  RETURN  VARCHAR2
  3  IS 
  4      nomP VARCHAR2(100);
  5  BEGIN
  6  
  7        SELECT nomJeu INTO nomP
  8      FROM (SELECT J.Nom AS nomJeu, COUNT(DISTINCT CP.NoJoueur) AS nbJoueurs
  9            FROM JEU J
 10            JOIN CONTENU C ON J.IdJeu=C.IdJeu
 11            JOIN SUCCES_REALISE SR ON C.IdContenu=SR.IdContenu
 12            JOIN CONTENU_POSSEDE CP ON CP.IdContenu=SR.IdContenu
 13            JOIN JOUEUR JO ON CP.NoJoueur=JO.NoJoueur
 14            WHERE J.CodeESRB=Code
 15            AND C.TypeContenu='J'
 16            AND JO.Actif='1'
 17            AND CP.NoJoueur IS NOT NULL
 18            GROUP BY J.Nom
 19            ORDER BY COUNT(DISTINCT CP.NoJoueur) DESC)
 20      WHERE ROWNUM = 1;
 21  
 22      RETURN nomP;
 23  
 24  END jeuLePlusPopulaire;
 25  /

Elément Function JEULEPLUSPOPULAIRE compilé

SQL> @scripts/creation_vues.sql
SQL> REM CREATION DES VUES
SQL> 
SQL> @vues/mesSucces.sql
SQL> CREATE OR REPLACE VIEW mesSucces AS
  2  SELECT Titre, Description, Valeur, NoJoueur
  3  FROM SUCCES_REALISE,SUCCES
  4  UNION 
  5  SELECT Titre, Description, Valeur, NoJoueur
  6  FROM SUCCES_EN_COURS,SUCCES;

View MESSUCCES créé(e).

SQL> /
SQL> @vues/suivi.sql
SQL> CREATE OR REPLACE VIEW suiviReseau AS
  2  SELECT
  3      SUIVI_RESEAU.Moment,
  4      SUIVI_RESEAU.Action,
  5      SUIVI_RESEAU.CodeReseau,
  6      RESEAU.Nom
  7  FROM
  8      SUIVI_RESEAU
  9   JOIN  RESEAU ON SUIVI_RESEAU.CodeReseau = RESEAU.Code
 10  WHERE
 11      SUIVI_RESEAU.NoJoueur IS NULL
 12  ORDER BY
 13      SUIVI_RESEAU.Moment;

View SUIVIRESEAU créé(e).

SQL> 
SQL> /
SQL> CREATE OR REPLACE VIEW suiviReseauJoueur AS
  2  SELECT
  3      SUIVI_RESEAU.Moment,
  4      SUIVI_RESEAU.Action,
  5      SUIVI_RESEAU.CodeReseau,
  6      JOUEUR.Surnom
  7  FROM
  8      SUIVI_RESEAU
  9  INNER JOIN
 10      JOUEUR ON SUIVI_RESEAU.NoJoueur = JOUEUR.NoJoueur
 11  WHERE
 12      SUIVI_RESEAU.NoJoueur IS NOT NULL
 13  ORDER BY
 14      SUIVI_RESEAU.Moment;

View SUIVIRESEAUJOUEUR créé(e).

SQL> /    
SQL> 
SQL> CREATE OR REPLACE VIEW suiviAmitieInvitation AS
  2  SELECT
  3      SUIVI_AMITIE.Moment,
  4      JOUEUR.Surnom AS SurnomJoueurInvitant,
  5      SUIVI_AMITIE.NoJoueurInvitant,
  6      SUIVI_AMITIE.NoJoueurInvite,
  7      SUIVI_AMITIE.DateSuivi,
  8      SUIVI_AMITIE.CodeStatut
  9  FROM
 10      SUIVI_AMITIE
 11  INNER JOIN
 12      JOUEUR ON SUIVI_AMITIE.NoJoueurInvitant = JOUEUR.NoJoueur
 13  ORDER BY
 14      SUIVI_AMITIE.Moment;

View SUIVIAMITIEINVITATION créé(e).

SQL> /
SQL> @creation_donnees.sql
SQL> REM CREATION DES DONNÉES
SQL> 
SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom)
  2  	VALUES ('bob@hotmail.com', 'BOB LE JOUEUR', NULL, 'Robert', 'Paquette');

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('fred@outlook.com', 'Fred Y', NULL, NULL, NULL, 0);

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('roger@gmail.com', 'Roger la menace', NULL, 'Roger', 'Tremblay', 1);

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('steve@hotmail.com', 'Steve le pirate', NULL, 'S', 'P', 1);

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('sylvie@outlook.com', 'SILL VI', NULL, NULL, NULL, 1);

1 ligne inséré.

SQL> INSERT INTO JOUEUR (Courriel, Surnom, Miniature, Nom, Prenom, Actif)
  2  	VALUES ('barbie15@gmail.com', 'Tank Girl', NULL, 'Tank', NULL, 0);

1 ligne inséré.

SQL> 
SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('E', 'Enfants et adultes');

1 ligne inséré.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('T', 'Adolescents');

1 ligne inséré.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('M', 'Jeunes adultes');

1 ligne inséré.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('A', 'Adultes');

1 ligne inséré.

SQL> INSERT INTO ESRB (Code, Description)
  2  	VALUES ('R', 'En attente de classement');

1 ligne inséré.

SQL> 
SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('ACT', 'Action', 'ACT');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('HOR', 'Horreur', 'HOR');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('SPT', 'Sport', 'SPT');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('AVT', 'Aventure', 'ACT');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('HCK', 'Hack and Slash', 'ACT');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('SUR', 'Survie', 'HOR');

1 ligne inséré.

SQL> INSERT INTO GENRE (Code, Description, CodeGenreParent)
  2  	VALUES ('COU', 'Course', 'SPT');

1 ligne inséré.

SQL> 
SQL> INSERT INTO JEU (Nom, Description, CodeESRB, CodeGenre)
  2  	VALUES ('TOMB RAIDER', 'Les aventures de Lara Croft', 'T', 'ACT');

1 ligne inséré.

SQL> INSERT INTO JEU (Nom, Description, CodeESRB, CodeGenre)
  2  	VALUES ('Dying Light', 'Survivre dans un monde infesté de zombie. Bonne nuit!', 'M', 'HOR');

1 ligne inséré.

SQL> INSERT INTO JEU (Nom, Description, CodeESRB, CodeGenre)
  2  	VALUES ('CANDY CRUSH', 'Le super jeu', 'T', 'HOR');

1 ligne inséré.

SQL> 
SQL> INSERT INTO SOUS_GENRE_JEU (CodeSousGenre, IdJeu)
  2  	VALUES ('AVT', 1);

1 ligne inséré.

SQL> INSERT INTO SOUS_GENRE_JEU (CodeSousGenre, IdJeu)
  2  	VALUES ('SUR', 2);

1 ligne inséré.

SQL> 
SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Les quêtes principales', 'Les aventures de Lara Croft en Amazonie', to_date('2018-02-03'), 'J', 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('La quête secondaire du dragon', 'Les aventures de Lara Croft en Chine', to_date('2018-06-23'), 'D', 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('La quête secondaire de l''aigle', 'Les aventures de Lara Croft dans les montagnes', to_date('2018-11-11'),'D', 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Ensemble d''exploration', 'Équipements supplémentaires pour l''aventure', to_date('2018-12-01'), 'O', 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Chicago', 'La ville infestée de Chicago', to_date('2018-09-09'), 'J', 2);

1 ligne inséré.

SQL> INSERT INTO CONTENU (Nom, Description, DateSortie, TypeContenu, IdJeu)
  2  	VALUES ('Niveau1', 'Les 10 premiers niveaux', to_date('2019-01-24'), 'J', 3);

1 ligne inséré.

SQL> 
SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (1, 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (2, 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (3, 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (4, 1);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (1, 2);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (5, 2);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (1, 3);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (2, 3);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (3, 3);

1 ligne inséré.

SQL> INSERT INTO CONTENU_POSSEDE (IdContenu, NoJoueur)
  2  	VALUES (4, 3);

1 ligne inséré.

SQL> 
SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Survivre', 'Vous avez réussi à traverser la foret amazonienne', 50, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Délivrance', 'Vous avez réussi à sauver Kevin', 10, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Tenace', 'Rependre le combat après une raclée', 10, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Rusé', 'Résoudre l''énigme du dragon', 20, 2);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Agile', 'Réussir un vol plané des hautes falaises', 20, 3);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Survivant', 'Survivre la première nuit dans la ville', 50, 5);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Mission_1', 'Vaincre le gros méchant zombie à la fin de la mission', 10, 5);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Herboriste', 'Recuperer des plantes médécinales', 5, 5);

1 ligne inséré.

SQL> INSERT INTO SUCCES (Titre, Description, Valeur, IdContenu)
  2  	VALUES ('Super bonbonnier', 'Reussir 5X un tableau en 10 secondes', 5, 6);

1 ligne inséré.

SQL> 
SQL> INSERT INTO SUCCES_CALCULE (IdSucces, MaximumRequis)
  2  	VALUES (8, 10);

1 ligne inséré.

SQL> INSERT INTO SUCCES_CALCULE (IdSucces, MaximumRequis)
  2  	VALUES (9, 5);

1 ligne inséré.

SQL> 
SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 1, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 1, 2);

1 ligne inséré.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 1, 3);

1 ligne inséré.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (1, 2, 1);

1 ligne inséré.

SQL> INSERT INTO SUCCES_REALISE (IdContenu, NoJoueur, IdSucces)
  2  	VALUES (5, 2, 6);

1 ligne inséré.

SQL> 
SQL> INSERT INTO SUCCES_EN_COURS (IdContenu, NoJoueur, IdSucces, Compteur)
  2  	VALUES (5, 2, 8, 7);

1 ligne inséré.

SQL> 
SQL> INSERT INTO FORFAIT (Code, Nom, Description)
  2  	VALUES ('GOLD1', 'XBox Gold' , 'Abonnement pour jouer en ligne et avoir des promotions');

1 ligne inséré.

SQL> INSERT INTO FORFAIT (Code, Nom, Description)
  2  	VALUES ('PASS1', 'XBox Game Pass' , 'Abonnement pour 100 jeux par mois');

1 ligne inséré.

SQL> INSERT INTO FORFAIT (Code, Nom, Description)
  2  	VALUES ('STAND', NULL , NULL);

1 ligne inséré.

SQL> 
SQL> 
SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2020-01-01'), to_date('2023-12-31'), 85, 'GOLD1');

1 ligne inséré.

SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2018-01-11'), to_date('2034-12-31'), 90, 'GOLD1');

1 ligne inséré.

SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2019-06-11'), to_date('2025-12-31'), 50, 'PASS1');

1 ligne inséré.

SQL> INSERT INTO PERIODE (DateDebut, DateFin, Prix, CodeForfait)
  2  	VALUES (to_date('2000-01-01'), to_date('2030-12-31'), 0, 'STAND');

1 ligne inséré.

SQL> 
SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 1, to_date('2020-06-06'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (2, 2, to_date('2018-06-06'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 3, to_date('2020-10-06'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (1, 4, to_date('2020-02-26'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (2, 1, to_date('2018-04-04'));

1 ligne inséré.

SQL> INSERT INTO PERIODE_FORFAIT_JOUEUR (IdPeriode, NoJoueur, DateAchat)
  2  	VALUES (3, 1, to_date('2019-08-05'));

1 ligne inséré.

SQL> 
SQL> INSERT INTO RESEAU (Code, Nom, Description)
  2  	VALUES ('LACKEN', 'Les amis du Lac Kénogami', 'Bienvenue à tous!');

1 ligne inséré.

SQL> INSERT INTO RESEAU (Code, Nom, Description, Actif)
  2  	VALUES ('UQACBD', 'Le reseau des etudiants du 157', 'Tous les etudiants qui travaillent actuellement sur le PLSQL', 1);

1 ligne inséré.

SQL> INSERT INTO RESEAU (Code, Nom, Description, Actif)
  2  	VALUES ('FRANCO', 'Le reseau des francophones', 'Ici, pas de Bienvenue-Hi!', 0);

1 ligne inséré.

SQL> 
SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('LACKEN', 1);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('UQACBD', 1);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('FRANCO', 1);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('FRANCO', 2);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('FRANCO', 3);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('UQACBD', 4);

1 ligne inséré.

SQL> INSERT INTO ABONNEMENT_RESEAU (CodeReseau, NoJoueur)
  2  	VALUES ('UQACBD', 5);

1 ligne inséré.

SQL> 
SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('NOU', 'Nouveau ami');

1 ligne inséré.

SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('FIN', 'Fin de l''amitié');

1 ligne inséré.

SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('REL', 'Rel. distante seulement');

1 ligne inséré.

SQL> INSERT INTO STATUT_AMITIE (CodeStatut, Description)
  2  	VALUES ('PRO', 'Rel. professionnelle');

1 ligne inséré.

SQL> 
SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (1, 2, to_date('2019-06-08'), 'NOU');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (1, 6, to_date('2019-06-10'), 'FIN');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (2, 3, to_date('2019-01-01'), 'NOU');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (2, 4, to_date('2019-02-02'), 'NOU');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (2, 5, to_date('2019-03-03'), 'PRO');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (6, 2, to_date('2019-04-04'), 'REL');

1 ligne inséré.

SQL> INSERT INTO AMI (NoJoueurInvitant, NoJoueurInvite, DateDebut, CodeStatut)
  2  	VALUES (3, 6, to_date('2019-06-04'), 'NOU');

1 ligne inséré.

SQL> 
SQL> spool off
